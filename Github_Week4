//Knapsack_0/1
import java.util.ArrayList;
import java.util.List;

public class Knapsack_01 {

  
  public static int knapsack(int capacity, int[] W, int[] V) {

    if (W == null || V == null || W.length != V.length || capacity < 0)
      throw new IllegalArgumentException("Invalid input");

    final int N = W.length;
    int[][] DP = new int[N + 1][capacity + 1];

    for (int i = 1; i <= N; i++) {
      int w = W[i - 1], v = V[i - 1];

      for (int sz = 1; sz <= capacity; sz++) {
        DP[i][sz] = DP[i - 1][sz];
        if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz]) DP[i][sz] = DP[i - 1][sz - w] + v;
      }
    }

    int sz = capacity;
    List<Integer> itemsSelected = new ArrayList<>();
    for (int i = N; i > 0; i--) {
      if (DP[i][sz] != DP[i - 1][sz]) {
        int itemIndex = i - 1;
        itemsSelected.add(itemIndex);
        sz -= W[itemIndex];
      }
    }
    return DP[N][capacity];
  }

  public static void main(String[] args) {

    int capacity = 10;
    int[] V = {1, 4, 8, 5};
    int[] W = {3, 3, 5, 6};
    System.out.println(knapsack(capacity, W, V));

    capacity = 7;
    V = new int[] {2, 2, 4, 5, 3};
    W = new int[] {3, 1, 3, 4, 2};
    System.out.println(knapsack(capacity, W, V));
  }
}

//Longest common subsequence
import java.util.Arrays;
public class LCS {
	public static int getLCS(String strA,String strB){
		int m = strA.length();
		int n = strB.length();
		int[][] aux = new int[m+1][n+1];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (strB.charAt(j) == strA.charAt(i)) {
					aux[i+1][j+1] = aux[i][j]+1;
				}else {
					aux[i+1][j+1] = Math.max(aux[i+1][j], aux[i][j+1]);
				}
			}
		}
		for (int i = 0; i < m+1; i++) {
			for (int j = 0; j < n+1; j++) {
				System.out.print(aux[i][j]+"-");
			}
			System.out.println();
		}
		return aux[m][n];
	}
	public static void main(String[] args) {
		String strA = "ABCBDAB";
		String strB = "BDCABA";
		int result = getLCS(strA, strB);
		System.out.println(result);
	}

}


//LIS
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;

class LIS {

    public void Longest_Increasing_Subsequence (List<Integer> seq) {

        int sz = seq.size();

        List<List<Integer>> seq_list;

        seq_list = new ArrayList<>(sz);
        for (int i=0; i<sz; i++) {
            seq_list.add(new ArrayList<Integer>(sz));
        }

        seq_list.get(0).add(seq.get(0));

        for (int b=1; b<sz; b++) {

            for (int a=0; a<b; a++) {

                if ( seq.get(b) > seq.get(a) && (seq_list.get(b).size() < seq_list.get(a).size()) ) {
                     seq_list.get(b).clear();
                     for (Integer i : seq_list.get(a)) {
                         seq_list.get(b).add(i);
                     }
                }
            }
           seq_list.get(b).add(seq.get(b));
        }

        System.out.println("Given sequence...");
        for(Integer i : seq)
            System.out.print(i + " ");

        int max_len = 0;

        System.out.println("\nLongest increasing subsequences generated at positions");

        for (int i=0; i<sz; i++) {
            System.out.print("[" + i + "]: ");
            max_len = Math.max(max_len, seq_list.get(i).size());
            for (Integer p : seq_list.get(i)) {
                System.out.print(p + " ");
            }
            System.out.println();
        }
        System.out.println("Maximum length of increasing subsequence: " + max_len + "\n");
    }

    public static void main(String args[]) {

        LIS seq = new LIS();

        List<Integer> sequence1 = Arrays.asList(3, 2, 6, 4, 5, 1, 7);
        seq.Longest_Increasing_Subsequence (sequence1);

        List<Integer> sequence2 = Arrays.asList(2, 2, 3, 2, 2, 1, 2, 3);
        seq.Longest_Increasing_Subsequence (sequence2);
    }
}


//Matrix Chain Multiplication
class MatrixChainMultiplication {
    static int MatrixChainOrder(int p[], int i, int j)
    {
        if (i == j)
            return 0;
  
        int min = Integer.MAX_VALUE;
        for (int k = i; k < j; k++) {
            int count = MatrixChainOrder(p, i, k) + 
                        MatrixChainOrder(p, k + 1, j) + 
                        p[i - 1] * p[k] * p[j];
  
            if (count < min)
                min = count;
        }
        return min;
    }
    public static void main(String args[])
    {
        int arr[] = new int[] { 1, 2, 3, 4, 3 };
        int n = arr.length;
  
        System.out.println("Minimum number of multiplications is " 
                               + MatrixChainOrder(arr, 1, n - 1));
    }
}
